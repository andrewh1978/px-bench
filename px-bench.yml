apiVersion: v1
kind: Namespace
metadata:
  name: px-bench
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env
  namespace: px-bench
data:
  size: "10GiB"             # size of region of IO testing, will also be the size of the file
  runtime: "20"             # runtime in seconds
  iodepth: "128"
  rwmixread: "60"           # only used for readwrite and randrw workloads
  rwmixwrite: "40"

  # Less commonly changed options
  ioengine: "libaio"
  direct: "1"
  fsync_on_close: "1"
  numjobs: "1"
  group_reporting: "1"

  ######
  # px-bench specific options. These are not fio options
  mixed_workloads: "rw readwrite randrw"   # rw is a synonym for readwrite

  ######
  # Iteration Control: Each variable will be looped over to create the jobs to be run.
  # Do not change the variable name. The variable must consist of one or more space
  # delimited strings that are legal values for fio to use in a job file.
  #
  # For now, the only supported variables here are blocksize and randwrite
  #
  # Example: If you have 2 blocksize values, and 3 randwrite values, this will result in 6 jobfiles.

  blocksize_list: "4k 16k 256k"                 # We have not tested fio's support for different values for read and write ("bs=8k,32k")
  readwrite_list: "read write readwrite"        # valid values are read, write, randread, readwrite (or rw), randrw.
  storageclass_list: "px-db px-replicated"    # Existing storageclasses for use by the benchmarks
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: files
  namespace: px-bench
data:
  run.sh: |-
    #!/usr/bin/bash
    mkdir /fio
    #iterate throught the block sizes and rw settings
    for sc in $storageclass_list; do
        for blocksize in ${blocksize_list}; do
            for readwrite in ${readwrite_list}; do
                export blocksize readwrite sc
                this_job_workdir=/fio/$blocksize-$readwrite
        
                echo "Creating jobfile for storageclass $sc, blocksize $blocksize, io profile $readwrite"
                filename=/fio/${sc}_$blocksize-$readwrite.fio
                envsubst < /px-bench/main.fio.tmpl > $filename
        
                #if this isn't a read-write mixed workload, delete the rwmix options just for clarity
                if [[ " ${mixed_workloads[@]} " =~ " ${rw} " ]]; then
                    echo "Mixed workload, continuing"
                else
                    echo "Not a mixed workload, removing mixed workload parameters"
                    sed -i '/rwmix/d' $filename
                fi
                #clean up comment lines
                sed -i '/##/d' $filename
        
                echo "wrote $filename"
                echo "Finished ${sc}_$blocksize-$readwrite"
                echo
            done
        done
    done
    kubectl create configmap fio-config --from-file=/fio -n px-bench
    for sc in $storageclass_list; do
      volumes="$volumes\
          - name: mnt-$sc
            persistentVolumeClaim:
              claimName: mnt-$sc
    "
      volumemounts="$volumemounts\
            - name: mnt-$sc
              mountPath: /mnt/$sc
    "
      kubectl apply -f - <<EOF
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      #labels:
        #px-bench: mnt-$sc
       name: mnt-$sc
    spec:
       storageClassName: $sc
       accessModes:
         - ReadWriteOnce
       resources:
         requests:
           storage: 100Gi
    EOF
    done
    echo $pvcs >/pvc.yml
    kubectl apply -f - <<EOF
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: fio
      namespace: px-bench
    spec:
      template:
        metadata:
          name: fio
          labels:
            px-bench: fio
        spec:
          serviceAccountName: px-bench
          terminationGracePeriodSeconds: 0
          containers:
          - name: fio
            image: andrewh1978/px-bench
            imagePullPolicy: "IfNotPresent"
            command: [ "/bin/bash", "/px-bench/fio.sh" ]
            volumeMounts:
            - name: files
              mountPath: /px-bench
            - name: fio
              mountPath: /fio
    $volumemounts
          volumes:
          - name: files
            configMap:
              name: files
          - name: fio
            configMap:
              name: fio-config
    $volumes
          restartPolicy: OnFailure
    EOF
    kubectl wait --for=condition=complete --timeout=86400s job/fio -n px-bench
  main.fio.tmpl: |-
    ############################################################
    ## main.fio.tmpl
    ##
    ## This is a template for creating a fio jobfile.
    ## Do not edit. This is read by other scripts/functions.
    ##
    ############################################################
    # This file was automatically created by px-bench
    ############################################################
    # Workload: ${blocksize}-${readwrite}
    #
    [global]
    size=${size}
    runtime=${runtime}
    iodepth=${iodepth}
    ioengine=${ioengine}
    direct=${direct}
    fsync_on_close=1
    numjobs=${numjobs}
    group_reporting=1
    directory=/mnt/${sc}
    filename=fio.dat
    
    ##----layout output-------
    [layout-output]
    blocksize=${blocksize}
    readwrite=read  # This will force fio to write to create the file, not just sparse creation.
    create_only=1
    
    ##----Begin Workload Test-------
    [${blocksize}-${readwrite}]
    stonewall
    blocksize=${blocksize}
    readwrite=${readwrite}
    rwmixread=${rwmixread}
    rwmixwrite=${rwmixwrite}
  fio.sh: |-
    #!/usr/bin/bash
    mkdir /output
    for i in /fio/*; do
      fio $i | tee /output/$(basename $i .fio)
    done
    kubectl create configmap fio-output --from-file=/output -n px-bench
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-bench
  namespace: px-bench
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: px-bench
  namespace: px-bench
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - persistentvolumeclaims
    verbs:
      - create
      - get
  - apiGroups: ["batch"]
    resources:
      - jobs
    verbs:
      - create
      - list
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: px-bench
  namespace: px-bench
subjects:
  - kind: ServiceAccount
    name: px-bench
roleRef:
  kind: Role
  name: px-bench
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: run
  namespace: px-bench
spec:
  template:
    metadata:
      name: run
      labels:
        px-bench: run
    spec:
      serviceAccountName: px-bench
      terminationGracePeriodSeconds: 0
      containers:
      - name: run
        image: andrewh1978/px-bench
        imagePullPolicy: "IfNotPresent"
        command: [ "/bin/bash", "/px-bench/run.sh" ]
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - name: files
          mountPath: /px-bench
      volumes:
      - name: files
        configMap:
          name: files
      restartPolicy: OnFailure
